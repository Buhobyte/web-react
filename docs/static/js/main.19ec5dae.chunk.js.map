{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","alt","src","dataGifAPI","a","category","encodeURI","fetch","resp","json","data","imgs","map","item","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","useFectchGifs","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCJDQ,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,iBAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OAEI,aADA,CACA,QAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAMlB,SAEI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,sBAAKC,UAAU,4BAAf,UACI,qBAAKC,IAAKH,EAAOI,IAAKH,IACtB,4BAAID,Q,uBCNHK,EAAU,uCAAG,uCAAAC,EAAA,6DAAQC,EAAR,EAAQA,SACd,mCACVN,EAFgB,iDAEgCO,UAAUD,GAF1C,6BACN,oCADM,SAGHE,MAAMR,GAHH,cAGhBS,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAU,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAKC,GACThB,MAAOe,EAAKf,MACZC,IAAG,UAAEc,EAAKE,cAAP,aAAE,EAAaC,iBAAiBjB,QAVrB,kBAcfY,GAde,4CAAH,sDC6BRM,EAxBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEf,ECJyB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAE5B,EAA0BrB,mBAAS,CAAC0B,KAAM,GAAIQ,SAAS,IAAvD,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OATAC,qBAAU,WAENlB,EAAW,CAAEE,aAAY7B,MAAM,SAAAmC,GAC3BS,EAAS,CAAEV,KAAMC,EAAMO,SAAS,SAGrC,CAACb,IAGGc,EDV2BG,CAAc,CAAEjB,aAApCU,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAEtB,OAEI,qCACI,6BAAKb,IACJa,GAAW,4CAEZ,qBAAKlB,UAAU,4BAAf,SAEQe,EAAOH,KAAI,SAACW,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIT,aEbjDU,EAAe,WAExB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAOA,OACI,qCACI,gDACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQS,EAAWoB,KAAI,SAACP,GAAD,OACX,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YChBtCoB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BvD,M","file":"static/js/main.19ec5dae.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('Ingrese texto');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 1) {\r\n            setCategories(categories => [inputValue,...categories])\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        // <> no es necesario el fragment ya que form sirve de fragmentador o agrupador\r\n        <form onSubmit={handleSubmit}>\r\n            {/* <h2>{inputValue}</h2> */}\r\n            <input type='text' value={inputValue} onChange={handleInputChange}></input>\r\n        </form>\r\n        // </>\r\n    )\r\n\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className='item-card animate__fadeIn'>\r\n            <img alt={title} src={url}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const dataGifAPI = async ({category}) => {\r\n    const api_key = 'IeSlcE9JlBLhzpNlK7PPFQHfkvcg0mjY';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${api_key}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const imgs = data.map((item) => {\r\n        return {\r\n            id: item.id,\r\n            title: item.title,\r\n            url: item.images?.downsized_medium.url,\r\n\r\n        }\r\n    })\r\n    return imgs;\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFectchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFectchGifs({ category });\r\n\r\n    return (\r\n\r\n        <>\r\n            <h2>{category}</h2>\r\n            {loading && <p>Cargando...</p>}\r\n\r\n            <div className=\"card-grid animate__fadeIn\">\r\n                {\r\n                    images.map((img) => <GifGridItem key={img.id} {...img} />) // pasamos todos las propiedades incluido img\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    categories: PropTypes.array\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\";\r\nimport { dataGifAPI } from \"../helpers/getGifs\";\r\n\r\nexport const useFectchGifs = ({ category }) => {\r\n\r\n    const [state, setState] = useState({data: [], loading: true});\r\n\r\n    // se ejecuta solo una vez y no renderiza nuevamente todo el componente\r\n    useEffect(() => {\r\n\r\n        dataGifAPI({ category }).then((imgs => {\r\n            setState({ data: imgs, loading: false });\r\n        }));\r\n\r\n    }, [category]);\r\n    // add category becouse if category changes then useEffect needs to change\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = (e) => {\r\n    //     // setCategories([...categories, 'Mazinger-Z']);\r\n    //     setCategories(cats => [...cats, 'Mazinger-Z']); // puede recibir un callback \r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <hr />\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <AddCategory setCategories={setCategories} />\r\n            <ol>\r\n                {\r\n                    categories.map((category) =>\r\n                        <GifGrid key={category} category={category} />\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}